version: "3.9"

services:
  # MinIO: object storage
  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - ./minio/data:/data

  # Spark (driver & worker)
  spark:
    build: ./spark
    container_name: spark
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    depends_on:
      - minio
    volumes:
      - ./spark:/workspace
      - ./sumo/data:/data

  # ðŸš¦ SUMO (traffic simulation)
  sumo:
    build: ./sumo
    container_name: sumo
    depends_on:
      - minio
    volumes:
      - ./sumo/data:/workspace/data
    command: bash -c "sumo -c /workspace/data/evacuation.sumocfg && cp /workspace/data/edge_data.xml /data/"
    environment:
      - MINIO_ENDPOINT=http://minio:9000
    working_dir: /workspace

  # RouteE (energy modeling)
  routee:
    build: ./routee
    container_name: routee
    depends_on:
      - sumo
    volumes:
      - ./sumo/data:/data
      - ./routee:/workspace
    command: python routee_pipeline.py /data/edge_data.xml /data/energy_results.csv

  # Airflow (optional orchestrator)
  airflow:
    image: apache/airflow:2.10.1-python3.10
    container_name: airflow
    depends_on:
      - spark
      - routee
    environment:
      - AIRFLOW__CORE__EXECUTOR=SequentialExecutor
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./sumo/data:/data
    ports:
      - "8080:8080"
    command: webserver
